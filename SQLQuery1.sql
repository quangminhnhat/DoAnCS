CREATE DATABASE DOANCS;
GO
USE DOANCS;
GO

CREATE TABLE users (
    id INT PRIMARY KEY IDENTITY,
    username NVARCHAR(50),
    password NVARCHAR(255),
    role NVARCHAR(20),
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    CONSTRAINT UQ_username UNIQUE (username)
);

CREATE TABLE students (
    id INT PRIMARY KEY IDENTITY,
    user_id INT,
    full_name NVARCHAR(100),
    email NVARCHAR(100),
    phone_number NVARCHAR(20),
    address NVARCHAR(255),
    date_of_birth DATE,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE teachers (
    id INT PRIMARY KEY IDENTITY,
    user_id INT,
    full_name NVARCHAR(100),
    email NVARCHAR(100),
    phone_number NVARCHAR(20),
    address NVARCHAR(255),
    date_of_birth DATE,
    salary DECIMAL(18, 2),
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE notifications (
    id INT PRIMARY KEY IDENTITY,
    user_id INT,
    message NVARCHAR(255),
    sent_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE courses (
    id INT PRIMARY KEY IDENTITY,
    course_name NVARCHAR(100),
    description NVARCHAR(MAX),
    start_date DATE,
    end_date DATE,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE()
);

CREATE TABLE materials (
    id INT PRIMARY KEY IDENTITY,
    course_id INT,
    file_name NVARCHAR(255),
    file_path NVARCHAR(500),
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE classes (
    id INT PRIMARY KEY IDENTITY,
    class_name NVARCHAR(100),
    course_id INT,
    teacher_id INT,
    start_time TIME,
    end_time TIME,
    created_at DATETIME DEFAULT GETDATE(),
    updated_at DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE
);

CREATE TABLE schedules (
    id INT PRIMARY KEY IDENTITY,
    class_id INT,
    day_of_week NVARCHAR(20),
    start_time TIME,
    end_time TIME,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE
);

CREATE TABLE enrollments (
    id INT PRIMARY KEY IDENTITY,
    student_id INT,
    class_id INT,
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE payments (
    id INT PRIMARY KEY IDENTITY,
    student_id INT,
    amount DECIMAL(18, 2),
    payment_date DATE,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE
);






-- Ensure using the correct database
USE DOANCS;
GO

-- Insert into users table (passwords should be hashed in a real application)
-- Assuming 1-3 are students, 4-5 are teachers
INSERT INTO users (username, password, role) VALUES
('student2', 'hashed_password_2', 'student'), -- user_id will be 2
('student3', 'hashed_password_3', 'student'), -- user_id will be 3
('teacher1', 'hashed_password_4', 'teacher'), -- user_id will be 4
('teacher2', 'hashed_password_5', 'teacher'); -- user_id will be 5
GO
PRINT 'Users inserted.';

-- Insert into students table
INSERT INTO students (user_id, full_name, email, phone_number, address, date_of_birth) VALUES
(2, N'Trần Thị Bình', 'binh.tt@example.com', '0987654321', N'456 Đường XYZ, Quận 3, TP. HCM', '2003-02-15'),
(3, N'Lê Văn Cường', 'cuong.lv@example.com', '0905112233', N'789 Đường KLM, Quận 5, TP. HCM', '2002-11-20');
GO
PRINT 'Students inserted.';

-- Insert into teachers table
-- Note: The teacher IDs generated by IDENTITY will likely be 1 and 2
INSERT INTO teachers (user_id, full_name, email, phone_number, address, date_of_birth, salary) VALUES
(4, N'Phạm Thị Dung', 'dung.pt@example.com', '0918776655', N'101 Đường DEF, Quận Bình Thạnh, TP. HCM', '1985-08-25', 60000000.00), -- teacher id will be 1
(5, N'Hoàng Văn Em', 'em.hv@example.com', '0977889900', N'202 Đường GHI, Quận Phú Nhuận, TP. HCM', '1990-03-30', 55000000.00); -- teacher id will be 2
GO
PRINT 'Teachers inserted.';

-- Insert into notifications table
INSERT INTO notifications (user_id, message) VALUES
(1, N'Chào mừng bạn đến với hệ thống!'),
(2, N'Thông báo lịch học tuần mới.'),
(4, N'Cập nhật tài liệu môn học.');
GO
PRINT 'Notifications inserted.';

-- Insert into courses table
-- Note: The course IDs generated by IDENTITY will likely be 1 and 2
INSERT INTO courses (course_name, description, start_date, end_date) VALUES
(N'Lập trình Web Cơ bản', N'Khóa học cung cấp kiến thức nền tảng về HTML, CSS, JavaScript.', '2025-06-01', '2025-09-01'), -- course id will be 1
(N'Cơ sở dữ liệu SQL', N'Khóa học về thiết kế và truy vấn cơ sở dữ liệu quan hệ.', '2025-06-15', '2025-09-15'); -- course id will be 2
GO
PRINT 'Courses inserted.';

-- Insert into materials table
INSERT INTO materials (course_id, file_name, file_path) VALUES
(1, N'Bài giảng HTML.pdf', '/materials/web/html_lecture.pdf'),
(1, N'Bài tập CSS.docx', '/materials/web/css_exercises.docx'),
(2, N'Slide SQL Intro.pptx', '/materials/db/sql_intro_slides.pptx');
GO
PRINT 'Materials inserted.';

-- Insert into classes table
-- *** CORRECTION: Use teacher IDs 1 and 2 (from teachers table IDENTITY) ***
-- Note: The class IDs generated by IDENTITY will likely be 1 and 2
INSERT INTO classes (class_name, course_id, teacher_id, start_time, end_time) VALUES
(N'WEB101-Sáng', 1, 1, '08:00:00', '11:00:00'), -- class id will be 1 (uses course_id 1, teacher_id 1)
(N'SQL101-Chiều', 2, 2, '13:30:00', '16:30:00'); -- class id will be 2 (uses course_id 2, teacher_id 2)
GO
PRINT 'Classes inserted.';

-- Insert into schedules table
-- *** CORRECTION: Use class IDs 1 and 2 (from classes table IDENTITY) ***
INSERT INTO schedules (class_id, day_of_week, start_time, end_time) VALUES
(1, N'Thứ Hai', '08:00:00', '11:00:00'),
(1, N'Thứ Tư', '08:00:00', '11:00:00'),
(1, N'Thứ Sáu', '08:00:00', '11:00:00'),
(2, N'Thứ Ba', '13:30:00', '16:30:00'),
(2, N'Thứ Năm', '13:30:00', '16:30:00');
GO
PRINT 'Schedules inserted.';

-- Insert into enrollments table
-- *** CORRECTION: Use class IDs 1 and 2 (from classes table IDENTITY) ***
-- Assuming student 1 and 2 enroll in Web (class_id 1), student 3 enrolls in SQL (class_id 2)
-- Note: Student IDs come from the students table IDENTITY (likely 1, 2, 3)
INSERT INTO enrollments (student_id, class_id, enrollment_date) VALUES
(1, 1, '2025-05-15'), -- Student 1 in Class 1
(2, 1, '2025-05-16'), -- Student 2 in Class 1
(3, 2, '2025-05-20'); -- Student 3 in Class 2
GO
PRINT 'Enrollments inserted.';

-- Insert into payments table
-- Note: Student IDs come from the students table IDENTITY (likely 1, 2, 3)
INSERT INTO payments (student_id, amount, payment_date) VALUES
(1, 5000000.00, '2025-05-15'),
(2, 5000000.00, '2025-05-16'),
(3, 4500000.00, '2025-05-20');
GO
PRINT 'Payments inserted.';

-- Indicate completion
PRINT 'Demo data inserted successfully.';




-- Delete from tables that depend on others first
DELETE FROM schedules;
DELETE FROM enrollments;
DELETE FROM payments;
DELETE FROM classes;
DELETE FROM materials;
DELETE FROM notifications;
DELETE FROM students;
DELETE FROM teachers;
DELETE FROM courses;
DELETE FROM users;



SELECT username
from users





-- Query to generate JSON-like output, incorporating tables from DOANCS
SELECT
    s.id AS schedule_id,
    c.id AS class_id,
    c.class_name,
    co.id AS course_id,
    co.course_name,
    t.id AS teacher_id,
    t.full_name AS teacher_name,
    s.day_of_week,
    s.start_time,
    s.end_time,
    p.id AS payment_id,
    p.amount,
    p.payment_date,
    st.id AS student_id,
    st.full_name AS student_name,
    s.is_paid
FROM schedules AS s
JOIN classes AS c ON s.class_id = c.id
JOIN courses AS co ON c.course_id = co.id
JOIN teachers AS t ON c.teacher_id = t.id
LEFT JOIN enrollments AS e ON c.id = e.class_id
LEFT JOIN students AS st ON e.student_id = st.id
LEFT JOIN payments AS p ON st.id = p.student_id
FOR JSON PATH;





SELECT 
    c.class_name,
    co.course_name,
    s.day_of_week,
    s.start_time,
    s.end_time
FROM students st
JOIN enrollments e ON st.id = e.student_id
JOIN classes c ON e.class_id = c.id
JOIN schedules s ON c.id = s.class_id
JOIN courses co ON c.course_id = co.id
WHERE st.user_id = 1






